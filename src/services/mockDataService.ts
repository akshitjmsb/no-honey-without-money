/**
 * Mock data service for when the backend API is not available
 * This provides fallback data to ensure the app still functions
 */

import type { FinancialData } from '../types';

// Mock financial data for demonstration
const MOCK_FINANCIAL_DATA: Record<string, FinancialData> = {
  'AAPL': {
    currentPrice: 233.28,
    priceHistory24h: [234.07, 234.10, 233.97, 233.31, 233.24],
    newsSentiment: {
      sentiment: 'Neutral',
      summary: 'Apple Inc. shows stable performance with mixed market sentiment.'
    },
    analystRatings: {
      recommendation: 'Buy',
      targetLow: 200,
      targetAverage: 230,
      targetHigh: 260
    },
    keyMetrics: {
      beta: 1.2,
      fiftyTwoWeekHigh: 259.02,
      fiftyTwoWeekLow: 172.42
    },
    upcomingEvents: {
      nextEarningsDate: '2025-01-30'
    }
  },
  'IBIT': {
    currentPrice: 65.66,
    priceHistory24h: [65.50, 65.55, 65.60, 65.45, 65.40],
    newsSentiment: {
      sentiment: 'Positive',
      summary: 'iShares Bitcoin Trust shows strong performance with positive market sentiment.'
    },
    analystRatings: {
      recommendation: 'Hold',
      targetLow: 60,
      targetAverage: 65,
      targetHigh: 70
    },
    keyMetrics: {
      beta: 2.1,
      fiftyTwoWeekHigh: 75.20,
      fiftyTwoWeekLow: 45.30
    },
    upcomingEvents: {
      nextEarningsDate: '2025-02-15'
    }
  },
  'TSLA': {
    currentPrice: 245.50,
    priceHistory24h: [246.20, 245.80, 245.30, 245.10, 244.90],
    newsSentiment: {
      sentiment: 'Positive',
      summary: 'Tesla Inc. shows strong momentum with positive market sentiment.'
    },
    analystRatings: {
      recommendation: 'Buy',
      targetLow: 220,
      targetAverage: 250,
      targetHigh: 280
    },
    keyMetrics: {
      beta: 2.3,
      fiftyTwoWeekHigh: 299.29,
      fiftyTwoWeekLow: 138.80
    },
    upcomingEvents: {
      nextEarningsDate: '2025-01-22'
    }
  }
};

export class MockDataService {
  static async getFinancialData(ticker: string): Promise<FinancialData> {
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const data = MOCK_FINANCIAL_DATA[ticker.toUpperCase()];
    if (!data) {
      throw new Error(`No mock data available for ticker: ${ticker}`);
    }
    
    return data;
  }

  static async generateDeepDiveReport(ticker: string): Promise<{ report: string }> {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      report: `# Deep Dive Analysis: ${ticker.toUpperCase()}\n\nThis is a mock deep dive report for ${ticker}. In a real implementation, this would contain detailed analysis generated by AI based on current market data, financial statements, and market trends.\n\n## Key Insights\n- Strong market position\n- Positive growth trajectory\n- Consider for long-term investment\n\n*Note: This is mock data for demonstration purposes.*`
    };
  }

  static async sendChatMessage(
    message: string,
    portfolioData?: any,
    displayCurrency?: string
  ): Promise<{ response: string }> {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    return {
      response: `I understand you're asking about "${message}". This is a mock response from the chat service. In a real implementation, this would be powered by AI and would provide personalized portfolio advice based on your holdings and market conditions.\n\n*Note: This is mock data for demonstration purposes.*`
    };
  }

  static async healthCheck(): Promise<{ status: string; timestamp: string }> {
    return {
      status: 'ok',
      timestamp: new Date().toISOString()
    };
  }
}
