name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '20'

jobs:
  # 🔍 Code Quality & Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: 🔍 Lint code
      run: npm run lint
    
    - name: 🎨 Check code formatting
      run: npm run format:check
    
    - name: 🔧 Type check
      run: npm run type-check
    
    - name: 🔒 Security audit
      run: |
        npm audit --audit-level moderate || true
        # Check for known vulnerabilities
        npx audit-ci --config .audit-ci.json || true
    
    - name: 🔐 Secret scanning
      run: |
        # Check for hardcoded secrets
        if git grep -E "(api_key|password|secret|token)\s*[:=]\s*['\"][^'\"]{10,}" -- "*.tsx" "*.ts" "*.js" "*.jsx" "*.json"; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        fi
        echo "✅ No hardcoded secrets found"

  # 🧪 Testing
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality
    
    strategy:
      matrix:
        node-version: ['18', '20']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
    
    - name: 🏗️ Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: 🧪 Run tests
      run: npm run test -- --reporter=verbose --run
    
    - name: 📊 Upload coverage to Codecov
      if: matrix.node-version == '20' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 🏗️ Build & Deploy
  build:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: 🏗️ Build application
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: 📊 Analyze bundle size
      run: |
        echo "📦 Bundle size analysis:"
        du -sh dist/
        find dist/ -name "*.js" -exec wc -c {} + | sort -n
        echo "✅ Build completed successfully"
    
    - name: 🚀 Deploy to Vercel (Preview)
      if: github.event_name == 'pull_request'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: 🚀 Deploy to Vercel (Production)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

  # 🔍 Performance Testing
  performance:
    name: 🔍 Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5
    
    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: 🏗️ Build for performance testing
      run: npm run build
    
    - name: 🚀 Start application
      run: |
        npm run preview &
        sleep 10
        echo "Application started"
    
    - name: 🔍 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: '.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 📊 Notifications
  notify:
    name: 📊 Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
    - name: 📊 Notify on success
      if: needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
    
    - name: 📊 Notify on failure
      if: needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Some checks failed!"